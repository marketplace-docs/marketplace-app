-- Create the menu_permissions table
-- This table stores access rights for different users to various menu items.
CREATE TABLE IF NOT EXISTS public.menu_permissions (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL,
    menu_href character varying NOT NULL,
    is_accessible boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT menu_permissions_pkey PRIMARY KEY (id),
    -- Correctly reference the public.users table which uses a bigint for its id
    CONSTRAINT menu_permissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    CONSTRAINT menu_permissions_user_id_menu_href_key UNIQUE (user_id, menu_href)
);

-- Enable Row Level Security on the table
-- This is a crucial security step to ensure data is not exposed by default.
ALTER TABLE public.menu_permissions ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist, to prevent errors on re-running the script
DROP POLICY IF EXISTS "Allow authenticated users to read permissions" ON public.menu_permissions;
DROP POLICY IF EXISTS "Allow authenticated users to manage permissions" ON public.menu_permissions;

-- Create policies for data access
-- Policy 1: Allow any authenticated user to read from the menu_permissions table.
-- You might want to restrict this further, e.g., only admins can read all, or users can only read their own.
CREATE POLICY "Allow authenticated users to read permissions"
    ON public.menu_permissions
    FOR SELECT
    USING (auth.role() = 'authenticated');

-- Policy 2: Allow any authenticated user to perform all actions (INSERT, UPDATE, DELETE).
-- This is a permissive policy. For production, you should restrict this to specific roles like 'Super Admin'.
CREATE POLICY "Allow authenticated users to manage permissions"
    ON public.menu_permissions
    FOR ALL
    USING (auth.role() = 'authenticated');

-- Notify PostgREST to reload the schema to recognize the new table and policies
NOTIFY pgrst, 'reload schema';
