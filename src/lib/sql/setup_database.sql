-- Drop dependent objects first
DROP TABLE IF EXISTS public.menu_permissions CASCADE;

-- Drop the users table
DROP TABLE IF EXISTS public.users CASCADE;

-- Drop the function if it exists
DROP FUNCTION IF EXISTS public.get_user_role();

-- Create the users table
CREATE TABLE public.users (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    role VARCHAR(50) NOT NULL,
    status VARCHAR(50) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create a function to get the user's role from the public.users table
CREATE OR REPLACE FUNCTION public.get_user_role()
RETURNS VARCHAR
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT role FROM public.users WHERE id = (SELECT user_id FROM public.menu_permissions WHERE auth.uid() = (SELECT id FROM auth.users WHERE email = public.users.email LIMIT 1) LIMIT 1);
$$;

-- Enable Row Level Security on the users table
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to avoid conflicts
DROP POLICY IF EXISTS "Allow public read access to users" ON public.users;
DROP POLICY IF EXISTS "Allow authenticated users to manage their own data" ON public.users;
DROP POLICY IF EXISTS "Allow super admins to manage all users" ON public.users;

-- Policies for users table
CREATE POLICY "Allow public read access to users"
    ON public.users
    FOR SELECT
    USING (true);

CREATE POLICY "Allow authenticated users to manage users"
    ON public.users
    FOR ALL
    USING (auth.role() = 'authenticated')
    WITH CHECK (
        -- Super Admins can do anything
        (SELECT role FROM public.users WHERE email = (SELECT email FROM auth.users WHERE id = auth.uid())) = 'Super Admin'
        OR
        -- Users can update their own data
        (id = (SELECT id FROM public.users WHERE email = (SELECT email FROM auth.users WHERE id = auth.uid())))
    );

-- Insert initial data into the users table
INSERT INTO public.users (name, email, role, status) VALUES
('Arlan Saputra', 'arlan.saputra@marketplace.com', 'Super Admin', 'Leader'),
('Rudi Setiawan', 'rudi.setiawan@marketplace.com', 'Admin', 'Reguler'),
('Nova Aurelia', 'nova.aurelia@marketplace.com', 'Admin', 'Reguler'),
('Nurul Tanzilla', 'nurul.tanzilla@marketplace.com', 'Event Staff', 'Event'),
('Regina Rifana', 'regina.rifana@marketplace.com', 'Captain', 'Leader');

-- Create the menu_permissions table
CREATE TABLE IF NOT EXISTS public.menu_permissions (
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT NOT NULL,
    menu_href CHARACTER VARYING NOT NULL,
    is_accessible BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    CONSTRAINT menu_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT menu_permissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    CONSTRAINT menu_permissions_user_id_menu_href_key UNIQUE (user_id, menu_href)
);

-- Enable Row Level Security on the menu_permissions table
ALTER TABLE public.menu_permissions ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DROP POLICY IF EXISTS "Allow authenticated users to manage permissions" ON public.menu_permissions;

-- Create policy for menu_permissions
CREATE POLICY "Allow authenticated users to manage permissions"
    ON public.menu_permissions
    FOR ALL
    USING (auth.role() = 'authenticated')
    WITH CHECK (auth.role() = 'authenticated');

-- Notify Supabase of schema changes
NOTIFY pgrst, 'reload schema';
