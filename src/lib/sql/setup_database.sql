-- This is a comprehensive setup script. It can be run multiple times.
-- It will reset and set up the 'users' and 'menu_permissions' tables correctly.

-- Drop tables in reverse order of dependency to avoid errors.
DROP TABLE IF EXISTS public.menu_permissions;
DROP TABLE IF EXISTS public.users CASCADE; -- CASCADE drops dependent objects

-- 1. Create the users table
CREATE TABLE IF NOT EXISTS public.users (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying NOT NULL,
    email character varying NOT NULL UNIQUE,
    role character varying NOT NULL,
    status character varying NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);

-- 2. Enable Row Level Security (RLS) on the users table
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- 3. Drop existing policies to ensure the script can be re-run
DROP POLICY IF EXISTS "Allow public read access to users" ON public.users;
DROP POLICY IF EXISTS "Allow authenticated users to manage users" ON public.users;

-- 4. Create policies for the users table
--    - Anyone can read user data (e.g., for dropdowns).
--    - Only logged-in users can insert, update, or delete.
CREATE POLICY "Allow public read access to users"
    ON public.users FOR SELECT
    USING (true);

CREATE POLICY "Allow authenticated users to manage users"
    ON public.users FOR ALL
    USING (auth.role() = 'authenticated')
    WITH CHECK (auth.role() = 'authenticated');

-- 5. Insert initial user data
INSERT INTO public.users (name, email, role, status) VALUES
('Arlan Saputra', 'arlan.saputra@marketplace.com', 'Super Admin', 'Leader'),
('Rudi Setiawan', 'rudi.setiawan@marketplace.com', 'Admin', 'Reguler'),
('Nova Aurelia', 'nova.aurelia@marketplace.com', 'Admin', 'Reguler'),
('Nurul Tanzilla', 'nurul.tanzilla@marketplace.com', 'Event Staff', 'Event'),
('Regina Rifana', 'regina.rifana@marketplace.com', 'Captain', 'Leader')
ON CONFLICT (email) DO NOTHING; -- Do nothing if a user with that email already exists

-- 6. Create the menu_permissions table
CREATE TABLE IF NOT EXISTS public.menu_permissions (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL,
    menu_href character varying NOT NULL,
    is_accessible boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT menu_permissions_pkey PRIMARY KEY (id),
    -- Correctly references the public.users table which has a bigint id
    CONSTRAINT menu_permissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    CONSTRAINT menu_permissions_user_id_menu_href_key UNIQUE (user_id, menu_href)
);

-- 7. Enable Row Level Security on the menu_permissions table
ALTER TABLE public.menu_permissions ENABLE ROW LEVEL SECURITY;

-- 8. Drop existing policies to ensure the script can be re-run
DROP POLICY IF EXISTS "Allow authenticated users full access to permissions" ON public.menu_permissions;

-- 9. Create a single, comprehensive policy for menu_permissions
--    This allows any authenticated user to perform any action.
CREATE POLICY "Allow authenticated users full access to permissions"
    ON public.menu_permissions FOR ALL
    USING (auth.role() = 'authenticated')
    WITH CHECK (auth.role() = 'authenticated');

-- 10. Notify Supabase of the schema changes
NOTIFY pgrst, 'reload schema';
