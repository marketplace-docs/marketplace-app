-- Drop tables in reverse order of creation to respect foreign key constraints
DROP TABLE IF EXISTS public.menu_permissions CASCADE;
DROP TABLE IF EXISTS public.users CASCADE;
DROP FUNCTION IF EXISTS public.get_user_role();

-- Create a function to get the role of the current user from the public.users table
CREATE OR REPLACE FUNCTION public.get_user_role()
RETURNS VARCHAR
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT role FROM public.users WHERE email = auth.email();
$$;


-- Create the users table
CREATE TABLE public.users (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR NOT NULL,
    email VARCHAR NOT NULL UNIQUE,
    role VARCHAR NOT NULL,
    status VARCHAR NOT NULL
);

-- Enable Row Level Security on the users table
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Policies for users table
CREATE POLICY "Allow public read access to users" ON public.users FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to manage their own data" ON public.users FOR UPDATE USING (auth.email() = email) WITH CHECK (auth.email() = email);
CREATE POLICY "Allow super admins to manage all users" ON public.users FOR ALL USING (public.get_user_role() = 'Super Admin');


-- Insert initial data into users table
INSERT INTO public.users (name, email, role, status) VALUES
    ('Arlan Saputra', 'arlan.saputra@marketplace.com', 'Super Admin', 'Leader'),
    ('Rudi Setiawan', 'rudi.setiawan@marketplace.com', 'Admin', 'Reguler'),
    ('Nova Aurelia', 'nova.aurelia@marketplace.com', 'Admin', 'Reguler'),
    ('Nurul Tanzilla', 'nurul.tanzilla@marketplace.com', 'Event Staff', 'Event'),
    ('Regina Rifana', 'regina.rifana@marketplace.com', 'Captain', 'Leader');


-- Create the menu_permissions table
CREATE TABLE public.menu_permissions (
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT NOT NULL,
    menu_href VARCHAR NOT NULL,
    is_accessible BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT menu_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT menu_permissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    CONSTRAINT menu_permissions_user_id_menu_href_key UNIQUE (user_id, menu_href)
);

-- Enable Row Level Security on menu_permissions table
ALTER TABLE public.menu_permissions ENABLE ROW LEVEL SECURITY;

-- Policies for menu_permissions table
CREATE POLICY "Allow super admins to manage all menu permissions" ON public.menu_permissions FOR ALL
    USING (public.get_user_role() = 'Super Admin')
    WITH CHECK (public.get_user_role() = 'Super Admin');

CREATE POLICY "Allow users to read their own permissions" ON public.menu_permissions FOR SELECT
    USING (EXISTS (SELECT 1 FROM users WHERE users.id = menu_permissions.user_id AND users.email = auth.email()));

-- Notify Supabase of the new schema
NOTIFY pgrst, 'reload schema';
