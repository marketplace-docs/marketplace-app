-- 1. Create the users table
CREATE TABLE IF NOT EXISTS public.users (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name character varying NOT NULL,
    email character varying NOT NULL,
    role character varying NOT NULL,
    status character varying NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

-- 2. Enable Row Level Security
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- 3. Drop existing policies to avoid conflicts
DROP POLICY IF EXISTS "Allow all users to read user data" ON public.users;
DROP POLICY IF EXISTS "Allow authenticated users to manage users" ON public.users;

-- 4. Create new policies for access
-- Policy 1: Allow public read access to everyone
CREATE POLICY "Allow all users to read user data"
    ON public.users
    FOR SELECT
    USING (true);

-- Policy 2: Allow authenticated users (logged in) to insert, update, delete
CREATE POLICY "Allow authenticated users to manage users"
    ON public.users
    FOR ALL
    USING (auth.role() = 'authenticated')
    WITH CHECK (auth.role() = 'authenticated');

-- 5. Insert initial data into the users table
-- Make sure to run this only once or handle potential unique constraint errors on 'email'.
-- You can use INSERT ... ON CONFLICT DO NOTHING to be safe.
INSERT INTO public.users (name, email, status, role) VALUES
('Arlan Saputra', 'arlan.saputra@marketplace.com', 'Leader', 'Super Admin'),
('Rudi Setiawan', 'rudi.setiawan@marketplace.com', 'Reguler', 'Admin'),
('Nova Aurelia', 'nova.aurelia@marketplace.com', 'Reguler', 'Admin'),
('Nurul Tanzilla', 'nurul.tanzilla@marketplace.com', 'Event', 'Event Staff'),
('Regina Rifana', 'regina.rifana@marketplace.com', 'Leader', 'Captain')
ON CONFLICT (email) DO NOTHING;

-- 6. Notify Supabase of the changes
NOTIFY pgrst, 'reload schema';
