-- This is a comprehensive script to set up the 'users' and 'menu_permissions' tables correctly.
-- Run this entire script once in your Supabase SQL Editor.
-- It will drop old tables and create new ones with the correct RLS policies.

-- STEP 1: Drop old tables if they exist to ensure a clean slate.
-- The CASCADE option will also drop dependent tables like menu_permissions.
DROP TABLE IF EXISTS public.users CASCADE;

-- STEP 2: Create the 'users' table.
-- The 'id' is a bigserial (auto-incrementing bigint), and 'email' is unique.
CREATE TABLE public.users (
  id BIGSERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  status VARCHAR(50) NOT NULL,
  role VARCHAR(50) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- STEP 3: Enable Row Level Security (RLS) on the 'users' table.
-- This is a critical security step.
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- STEP 4: Drop any old policies to avoid "already exists" errors.
DROP POLICY IF EXISTS "Allow public read access to users" ON public.users;
DROP POLICY IF EXISTS "Allow authenticated users to manage users" ON public.users;

-- STEP 5: Create the security policies for the 'users' table.
-- Policy 1: Allow anyone (even non-logged-in users) to read user data.
-- This is useful for things like dropdowns, but can be restricted if needed.
CREATE POLICY "Allow public read access to users"
ON public.users
FOR SELECT
USING (true);

-- Policy 2: Allow logged-in users to insert, update, and delete.
-- The WITH CHECK clause is crucial for INSERT and UPDATE operations.
CREATE POLICY "Allow authenticated users to manage users"
ON public.users
FOR ALL
USING (auth.role() = 'authenticated')
WITH CHECK (auth.role() = 'authenticated');

-- STEP 6: Insert the initial user data.
-- ON CONFLICT DO NOTHING prevents errors if you run this script multiple times.
INSERT INTO public.users (name, email, status, role) VALUES
('Arlan Saputra', 'arlan.saputra@marketplace.com', 'Leader', 'Super Admin'),
('Rudi Setiawan', 'rudi.setiawan@marketplace.com', 'Reguler', 'Admin'),
('Nova Aurelia', 'nova.aurelia@marketplace.com', 'Reguler', 'Admin'),
('Nurul Tanzilla', 'nurul.tanzilla@marketplace.com', 'Event', 'Event Staff'),
('Regina Rifana', 'regina.rifana@marketplace.com', 'Leader', 'Captain')
ON CONFLICT (email) DO NOTHING;


-- STEP 7: Create the 'menu_permissions' table.
-- It correctly references the 'id' from 'public.users'.
CREATE TABLE public.menu_permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    menu_href VARCHAR(255) NOT NULL,
    is_accessible BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT now(),
    UNIQUE(user_id, menu_href)
);

-- STEP 8: Enable Row Level Security on the 'menu_permissions' table.
ALTER TABLE public.menu_permissions ENABLE ROW LEVEL SECURITY;

-- STEP 9: Drop any old policies on 'menu_permissions'.
DROP POLICY IF EXISTS "Allow authenticated users to manage permissions" ON public.menu_permissions;

-- STEP 10: Create the security policy for the 'menu_permissions' table.
-- This single policy allows any logged-in user to do everything.
CREATE POLICY "Allow authenticated users to manage permissions"
ON public.menu_permissions
FOR ALL
USING (auth.role() = 'authenticated')
WITH CHECK (auth.role() = 'authenticated');


-- STEP 11: Notify Supabase to reload the schema to apply changes.
NOTIFY pgrst, 'reload schema';
